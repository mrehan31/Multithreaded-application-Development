#include <iostream>
#include <thread>
#include <mutex>

std::mutex mtx; // mutex for critical section

void critical_section(int id) {
    std::lock_guard<std::mutex> lock(mtx); // Lock the mutex

    // This block of code is the critical section
    std::cout << "Thread " << id << " is executing the critical section." << std::endl;
    // This block is thread-safe because of the lock_guard
}

int main() {
    const int num_threads = 5;
    std::thread threads[num_threads];

    // Create threads
    for (int i = 0; i < num_threads; ++i) {
        threads[i] = std::thread(critical_section, i);
    }

    // Join threads
    for (int i = 0; i < num_threads; ++i) {
        threads[i].join();
    }

    return 0;
}
